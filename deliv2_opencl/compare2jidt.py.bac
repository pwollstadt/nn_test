#/home/patriciaw/test_mpi/gpu_code/deliv2
'''
    *
    * compare2jidt.py
    *
    *  Created on: 12/11/2014
    *      Author: cgongut / wibral / pwollsta
    *
'''
from clKnnLibrary import * # imports flat names from the library

import numpy as np # use numpy functions with np.function syntax
import time
from scipy.stats.mstats import zscore
from scipy.special import digamma



# main function
if __name__ == '__main__':
    
    #DATA INITIALIZATION
    gpuid = int(0)
    numObservations = 8000 #10000 20000 30000 50000 100000
    nchunkspergpu = int(1)
    kth = int(4)
    #pointsdim = int(21)
    theiler = int(0)
    
    # set up problem iterations for averaging
    reps = 3
    extimes=np.empty(reps)
    
    covariance = 0.4;
    sourceArray = np.random.randn(numObservations).astype('float32')
    destArray   = covariance*sourceArray[0:numObservations-1] + (1-covariance)*np.random.randn(numObservations - 1).astype('float32')
    destArray = np.insert(destArray, 0, 0)
    
    sourceArrayZ = zscore(sourceArray)
    destArrayZ = zscore(destArray)
    
    #embedding parameters
    dim = 5
    tau = 1
    u   = 1    
    chunksize = numObservations - (dim-1) * tau - u
    signallengthpergpu = nchunkspergpu * chunksize
    
    start_embedding = time.time()
    #initialize embedded point sets
    pointset_2 = np.zeros([chunksize,dim])
    pointset_1 = np.zeros([chunksize,dim])
    pointset_p = np.zeros([chunksize])
    count = 0
    
    for firstPoint in range(chunksize):
        lastPoint  = firstPoint + dim*tau 
        pointset_1[count,:] = sourceArrayZ[firstPoint:lastPoint:tau]
        pointset_2[count,:] = destArrayZ[firstPoint+u-1:lastPoint+u-1:tau]
        pointset_p[count] = destArrayZ[lastPoint+u-1]
        count += 1
    
    pointset_p2 = np.concatenate((pointset_p.reshape(pointset_p.shape[0],1), pointset_2),axis = 1)
    pointset_21 = np.concatenate((pointset_2, pointset_1),axis = 1)
    pointset_p21 = np.concatenate((pointset_p.reshape(pointset_p.shape[0],1), pointset_21),axis = 1)
    end_embedding = time.time()
    
    print("\ntime for embedding:")
    print(end_embedding - start_embedding)
    print("")
    
    for rr in range(reps):
        #Create an array of zeros for npointsrange, fill in pointset with a random vector, and start vecradius as an array of ones
        indexes = np.zeros((signallengthpergpu), dtype=np.int32)
        radius = np.zeros((signallengthpergpu), dtype=np.int32)
        count_p2 = np.zeros((signallengthpergpu), dtype=np.int32)
        count_21 = np.zeros((signallengthpergpu), dtype=np.int32)
        count_2 = np.zeros((signallengthpergpu), dtype=np.int32)    
    
        start_search = time.time()
        # the opencl code works "in place", i.e distances, pointsets, etc. will be updated during the call
        # not returned explicitely
        #correct_knn = clFindKnn(indexes, radius, pointset_p21, pointset_p21, kth, theiler, nchunkspergpu, 2*dim+1, signallengthpergpu, gpuid)
        correct_knn = clFindKnn(indexes, radius, pointset_p21, pointset_p21, kth, theiler, nchunkspergpu, pointset_p21.shape[1], pointset_p21.shape[0], gpuid)
        print(radius)
        print(indexes)
        correct_rs1 = clFindRSAll(count_p2, pointset_p2, pointset_p2, radius, theiler, nchunkspergpu, dim+1, signallengthpergpu, gpuid)
        correct_rs2 = clFindRSAll(count_21, pointset_21, pointset_21, radius, theiler, nchunkspergpu, 2*dim, signallengthpergpu, gpuid)
        correct_rs3 = clFindRSAll(count_2, pointset_2, pointset_2, radius, theiler, nchunkspergpu, dim, signallengthpergpu, gpuid)
        end_search = time.time()    
        extimes[rr] = end_search-start_search
        print(count_p2)
        print("finished neighbour searching in repetition {0}".format(rr + 1))
        
    #calculate TE
    te = digamma(kth) + np.mean( digamma(count_2 + 1) - digamma(count_p2 + 1) - digamma(count_21 + 1) );

    if (correct_rs1 == 0) | (correct_rs2 == 0) | (correct_rs3 == 0):
        print ("GPU execution failed")
    else:
        print("\nExecution times: {0}; numObservations: {1}".format(reps, numObservations))
        print("\naverage time for neighbour searches: {0}".format(np.mean(extimes[1:]))) # exclude first execution to get rid of the compile time
        #print("\nestimated TE:")
        #print(te)

